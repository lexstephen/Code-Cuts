&lt;!DOCTYPE html>
&lt;html>
&lt;head>
	&lt;title>Arrays&lt;/title>
&lt;/head>
&lt;style>
	body 		{background-color: #fff;
					color: #000;
					text-align: left;
					font-size: 12pt;}
	#wk5			{color: red;}
	#tb td:nth-child(odd) {background-color: #eee;}
&lt;/style>
&lt;body>

&lt;h1 id="wk5">Arrays&lt;/h1>

&lt;?php 
/*
Rilo Kiley (1999, also known as The Initial Friend EP)
Take Offs and Landings (2001)
The Execution of All Things (2002)
More Adventurous (2004)
Under the Blacklight (2007)
Rkives (2013)
*/

	$riloKiley = array('The Initial Friend EP', 'Take Offs and Landings', 'The Execution of All Things', 'More Adventurous', 'Under the Blacklight', 'Rkives');
	
	print "&lt;h1 class=\"wk5\">Foreach in Array&lt;/h1>";
	
	foreach ($riloKiley as $x) {
		echo $x.'&lt;br>';
	}
	
	echo "&lt;hr>";
	
	print "&lt;h1 class=\"wk5\">Add a value to the end&lt;/h1>";

	$riloKiley[] = "Jenny Lewis and the Watson Twins";
	foreach ($riloKiley as $x) {
		echo $x.'&lt;br>';
	}
	echo "&lt;hr>";
	
	print "&lt;h1 class=\"wk5\">Set a value at a specific index&lt;/h1>";
	
	$riloKiley[0] = "Rilo Kiley, also known as the Initial Friend EP";
	foreach ($riloKiley as $x) {
		echo $x.'&lt;br>';
	}
	echo "&lt;hr>";
	
	print "&lt;h1 class=\"wk5\">Get values from an array&lt;/h1>";
	$jennyLewis = $riloKiley[6];
	echo $jennyLewis;
	echo "&lt;hr>";
	
	print "&lt;h1 class=\"wk5\">Delete values from an array&lt;/h1>";
	unset($riloKiley[4]);
	var_dump($riloKiley);
	
	echo "&lt;br>&lt;i>Note [4] is missing&lt;/i>&lt;br>&lt;hr>";
	
	print "&lt;h1 class=\"wk5\">Remove elements that contain NULL values and reindex array&lt;/h1>";
	
	$riloKiley = array_values($riloKiley);
	
	var_dump($riloKiley);
	echo "&lt;br>&lt;i>[5] has become [4] and so on&lt;/i>";
	
	print "&lt;hr>&lt;h1 class=\"wk5\">Use array elements with variable substitution&lt;/h1>";
	
	echo "First album: $riloKiley[0]";
	echo "&lt;br>Second album: {$riloKiley[1]}";
	
	print "&lt;hr>&lt;h1 class=\"wk5\">Count Elements&lt;/h1>";
	print count($riloKiley);
	
	print "&lt;hr>&lt;h1 class=\"wk5\">Find End of Array&lt;/h1>";
	print end($riloKiley);
	
	print "&lt;hr>&lt;h1 class=\"wk5\">Return index of array element that the cursor is on&lt;/h1>";
	print key($riloKiley);
	
	print "&lt;hr>&lt;h1 class=\"wk5\">Check if an index is set&lt;/h1>";
	print isset($riloKiley[3]);
	
	print "&lt;hr>&lt;h1 class=\"wk5\">Store 10 random numbers in an array&lt;/h1>";
	
	$numbers = array();
	for ($i = 0; $i &lt; 10; $i++) {
		$numbers[] = mt_rand(1,100);
		print $numbers[$i].'&lt;br>';
	}
	
	print "&lt;hr>&lt;h1 class=\"wk5\">Compute sum and average of an array of prices&lt;/h1>";
	$prices = array(141.95, 212.95, 411, 10.95);
	$sum = 0;
	for ($i = 0; $i &lt; count($prices); $i++) {
		$sum += $prices[$i];
	}
	$average = $sum / count($prices);
	print "Sum: ".$sum."\t Average: ".$average;
	
	print "&lt;hr>&lt;h1 class=\"wk5\">Skip gaps in an array&lt;/h1>";
	$leNumbers = array(1,2,3,4,5,6,7,8,9,10);
	unset($leNumbers[2], $leNumbers[6]);
	end($leNumbers);
	$last = key($leNumbers);
	$numbers_string = '';
	for ($i = 0; $i &lt; $last; $i++) {
		if(isset($leNumbers[$i])) {
			$numbers_string .= $leNumbers[$i]. ' ';
		}
	}
	echo $numbers_string;
	
	print "&lt;hr>&lt;h1 class=\"wk5\">Set up an array with a range&lt;/h1>
	
	&lt;p>&lt;b>range(\$lo, \$high [, \$step])&lt;/b>&lt;br>Returns an array filled with values from \$lo to \$high with \$step added to get the next value, if ommitted, step is 1&lt;/p>";
	
	print '&lt;b>Range of values from 1-4&lt;/b>&lt;br>';
	$moreNumbers = range(1,4);
	var_dump($moreNumbers);
	
	print '&lt;br>&lt;b>Range of values from 10-22 incremented by 4&lt;/b>&lt;br>';
	$moreNumbers2 = range(10,22,4);
	var_dump($moreNumbers2);
	
	print "&lt;hr>&lt;h1 class=\"wk5\">Fill Array&lt;/h1>
	
	&lt;p>&lt;b>array_fill(\$start, \$count, \$value)&lt;/b>&lt;br>Returns an array filled with \$count \$values starting at index \$start&lt;/p>";
	print '&lt;b>Fill slots 0 to 5 with 1s&lt;/b>&lt;br>';
	$moreNumbers3 = array_fill(0,5,1);
	var_dump($moreNumbers3);
	
	print "&lt;hr>&lt;h1 class=\"wk5\">Pad Array&lt;/h1>
	
	&lt;p>&lt;b>array_pad(\$array, \$size, \$value)&lt;/b>&lt;br>Returns an array with \$value added to the end of \$array until it contains \$size elements.  If \$size is negative, the value is added to the start of the array.&lt;/p>";
	print '&lt;b>Add 0s to array until it contains 10 indices&lt;/b>&lt;br>';
	$moreNumbers3 = array_pad($moreNumbers3, 10, 0);
	var_dump($moreNumbers3);
	
	print "&lt;hr>&lt;h1 class=\"wk5\">Merge Arrays&lt;/h1>
	
	&lt;p>&lt;b>array_merge(\$array1, \$array2, ...)&lt;/b>&lt;br>Returns an array with the elements of two or more arrays in one array.  String keys in \$array2 overwrite string keys in \$array1 but numerical keys are appended.&lt;/p>";
	$moreNumbers4 = array_merge($moreNumbers2, $moreNumbers3);
	var_dump($moreNumbers4);
	
	print "&lt;hr>&lt;h1 class=\"wk5\">Slice an Array&lt;/h1>
	
	&lt;p>&lt;b>array_slice(\$array, \$index [, \$len [, \$keys]]))&lt;/b>&lt;br>Returns part of an array starting from \$index and containing \$len elements.  If \$len is ommitted, it returns the elements to the end of the array.  If \$keys is TRUE, the original keys are used.  Otherwise, the slice is reindexed starting at 0.&lt;/p>";
	$employees = array('Lex', 'Batul', 'Jordan', 'Jeremy', 'Chris', 'Jon');
	$new_hires = array_slice($employees, 2);
	echo implode(', ', $new_hires);
	echo '&lt;br>';
	$this_week = array_slice($employees, 2, 2);
	echo implode(', ', $this_week);
	
	print "&lt;hr>&lt;h1 class=\"wk5\">Splice two Arrays together&lt;/h1>
	
	&lt;p>&lt;b>array_splice(\$array, \$index [, \$len [, \$new]]))&lt;/b>&lt;br>Modifies \$array by replacing its elements with the elements in \$new starting at \$index and replacing \$len elements.  The array is reindexed.  Note that this function doesn't return an array, it modifies the elements in the \$array parameter.&lt;/p>";
	$employees2 = array('Lex', 'Batul', 'Jordan', 'Jeremy', 'Chris', 'Jon');
	$new_hires2 = array('Isaac', 'Brock');
	array_splice($employees2, 1, 2, $new_hires2);
	echo implode(', ', $employees2);
	
	print "&lt;hr>&lt;h1 class=\"wk5\">How to work with a stack&lt;/h1>
	
	&lt;p>&lt;b>array_push(\$array, \$value)&lt;/b>&lt;br>Adds \$value to the end of \$array&lt;/p>
	&lt;p>&lt;b>array_pop(\$array)&lt;/b>&lt;br>Removes and returns the last value in \$array&lt;/p>";
	$names = array('Mike', 'Joel', 'Anne');
	echo implode(', ', $names);
	array_push($names, 'Ray');
	echo '&lt;br>';
	echo implode(', ', $names);
	$next = array_pop($names);
	echo '&lt;br>';
	echo $next;
	
	print "&lt;hr>&lt;h1 class=\"wk5\">How to work with a queue&lt;/h1>
	
	&lt;p>&lt;b>array_unshift(\$array, \$value)&lt;/b>&lt;br>Adds \$value to the start of \$array&lt;/p>
	&lt;p>&lt;b>array_shift(\$array)&lt;/b>&lt;br>Removes and returns the first value in \$array&lt;/p>";
	$names2 = array('Mike', 'Joel', 'Anne');
	echo implode(', ', $names2);
	array_push($names2, 'Ray');
	echo '&lt;br>';
	echo implode(', ', $names2);
	echo '&lt;br>';
	array_unshift($names2, 'Billy');
	echo implode(', ', $names2);
	$next = array_shift($names2);
	echo '&lt;br>';
	echo $next;
	
	echo '&lt;p>A &lt;b>stack&lt;/b> is a special type of array that implements a last-in first-out (LIFO) collection of values.  Array_push and _pop are used to add/remove elements in a stack.&lt;/p>
	
	&lt;p>A &lt;b>queue&lt;/b> is a special type of array that implements a first-in, first-out (FIFO) collection of values.  You can use array__push and array_shift to add and remove elemts in a queue.&lt;/p>
	
	&lt;p>The functions in this figure modify the array passed to the function.  In other words, they do not return a new array.&lt;/p>';
	
?>

&lt;/body>
&lt;/html>