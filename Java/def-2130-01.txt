<table id="definitionTable"><tr><td>1</td><td>Assembly Language</td><td>Ues a short descriptive word known as a mnemonic to represent each of the machine language instructions</td></tr><tr><td>1</td><td>Assembler</td><td>Translates assembly language programs into machine code</td></tr><tr><td>1</td><td>Machine language</td><td>A computer's native language; in the form of binary</td></tr><tr><td>1</td><td>Low-Level language</td><td>Language close in nature to machine language and is machine-dependent; assembly language</td></tr><tr><td>1</td><td>High-Level language</td><td>Platform-independent, English-like</td></tr><tr><td>1</td><td>Source Program</td><td>A program written in high level language; must be translated into machine code for execution using an interpreter or compiler</td></tr><tr><td>1</td><td>Ada</td><td>language developed for Department of Defence and used mainly in defence projects</td></tr><tr><td>1</td><td>BASIC</td><td>Beginner's All-Purpose Symbolic Instruction Code; designed for beginners</td></tr><tr><td>1</td><td>C</td><td>Developed at Bell Labs; combines power of assembly language with ease and portability of high level</td></tr><tr><td>1</td><td>C++</td><td>Object oriented language based on C</td></tr><tr><td>1</td><td>COBOL</td><td>COmmon Business Oriented Language; used for business applications</td></tr><tr><td>1</td><td>FORTRAN</td><td>FORmula TRANslation; scientific and mathematical applications</td></tr><tr><td>1</td><td>Java</td><td>Developed by Sun, purchased by Oracle; developing platform-independent Internet applications</td></tr><tr><td>1</td><td>Pascal</td><td>Used for teaching programming</td></tr><tr><td>1</td><td>Python</td><td>general purposes scripting language good for writing short programs</td></tr><tr><td>1</td><td>Visual Basic</td><td>developed by Microsoft, enables rapid development of GUI</td></tr><tr><td>1</td><td>Interpreter</td><td>Translates and executes a program one statement at a time</td></tr><tr><td>1</td><td>Compiler</td><td>Translates the entire source program into a machine language file for execution</td></tr><tr><td>1</td><td>Multiprogramming</td><td>Allows multiple programs to run simultaneously by sharing the same CPU</td></tr><tr><td>1</td><td>Multithreading</td><td>Allows a single program to execute multiple tasks at the same time</td></tr><tr><td>1</td><td>Multiprocessing</td><td>aka Parallel Processing; uses two or more processors together to perform subtasks concurrently and then combine solutions of the subtask to obtain a solution for the entire task</td></tr><tr><td>1</td><td>Java is Simple</td><td></td></tr><tr><td>1</td><td>Java is Object Oriented</td><td></td></tr><tr><td>1</td><td>Java is Distributed</td><td></td></tr><tr><td>1</td><td>Java is Interpreted</td><td></td></tr><tr><td>1</td><td>Java is Robust</td><td></td></tr><tr><td>1</td><td>Java is Secure</td><td></td></tr><tr><td>1</td><td>Java is Architecture Neutral</td><td></td></tr><tr><td>1</td><td>Java is Portable</td><td></td></tr><tr><td>1</td><td>Java is High Performance</td><td></td></tr><tr><td>1</td><td>Java is Multithreaded</td><td></td></tr><tr><td>1</td><td>Java is Dynamic</td><td></td></tr><tr><td>1</td><td>Applet</td><td>A Java program run from a web server; embedded in HTML</td></tr><tr><td>1</td><td>Java language specification</td><td>A technical definition of the Java programming language's syntax and semantics</td></tr><tr><td>1</td><td>API</td><td>Application program interface; aka library; contains predefined classes and interfaces</td></tr><tr><td>1</td><td>Java SE</td><td>Standard Edition – used to develop client-side applications or applets</td></tr><tr><td>1</td><td>Java EE</td><td>Enterprise Edition – used to develop server-side applications such as Java servlets, JavaServer Pages (JSP), and JavaServer Faces (JSF).</td></tr><tr><td>1</td><td>Java ME</td><td>Java Micro Edition – used to develop applications for mobile devices</td></tr><tr><td>1</td><td>main method</td><td>The entry point where the program begins execution</td></tr><tr><td>1</td><td>Class</td><td>Every program requires at least one class; naming convention is to use a capital for first letter</td></tr><tr><td>1</td><td>Statement terminator</td><td>The semicolon at the end of the statement</td></tr><tr><td>1</td><td>Bytecode</td><td>Bytecode is similar to machine instructions but is architectrue neutral and can run on any platform that has a Java Virtual Machine</td></tr><tr><td>1</td><td>Compile from the Command Line</td><td>Compiles a Java file from the cmd line in the format “javac Welcome.java”</td></tr><tr><td>1</td><td>Run from the Command Line</td><td>use format of  java ClassName ie “java Welcome”</td></tr><tr><td>1</td><td>NoClassDefFoundError</td><td>Displays when you try to execute a class file that does not exist</td></tr><tr><td>1</td><td>NoSuchMethodError</td><td>Displays when you try to execute a class file that does not have a main method or is mistyped (Main instead of main, eg)</td></tr><tr><td>1</td><td>Message Box</td><td>import javax.swing.JOptionPane;<br><br>JoptionPane.showMessageDialog(null,”Welcome to Java!”);</td></tr><tr><td>1</td><td>Specific Import</td><td>Specifies a single class in the import statement<br>Import javax.swing.JOptionPane;</td></tr><tr><td>1</td><td>Wildcard Import</td><td>Imports all the classes in a package using the asterisk wildcard; no performance difference than specific import because classes are only read when they are used<br>Import javax.swing.*;</td></tr><tr><td>1</td><td>JavaDoc comment</td><td>/** ... */ used for commenting on an entire class or an entire method; extracted into HTML using the JDK's javadoc command</td></tr><tr><td>1</td><td>Syntax Errors</td><td>Result from errors in code construction such as mistyping a keyword, punctuation or braces</td></tr><tr><td>1</td><td>Runtime Errors</td><td>cause a program to terminate abnormally; occur when the environment detects an operation that is impossible to carry out</td></tr><tr><td>1</td><td>Logic Errors</td><td>occur when a program does not perform the way you intended it to</td></tr><tr><td>1</td><td>Chapter 1 Review</td><td>A computer is an electronic device that stores and processes data.</td></tr><tr><td>1</td><td>Chapter 1 Review</td><td>A computer includes both hardware and software.</td></tr><tr><td>1</td><td>Chapter 1 Review</td><td>Hardware is the physical aspect of the computer that can be touched.</td></tr><tr><td>1</td><td>Chapter 1 Review</td><td>Computer programs, known as software, are the invisible instructions that control the hardware and make it perform tasks.</td></tr><tr><td>1</td><td>Chapter 1 Review</td><td>Computer programming is the writing of instructions (i.e., code) for computers to perform.</td></tr><tr><td>1</td><td>Chapter 1 Review</td><td>The central processing unit (CPU) is a computer’s brain. It retrieves instructions from memory and executes them.</td></tr><tr><td>1</td><td>Chapter 1 Review</td><td>Computers use zeros and ones because digital devices have two stable states, referred to by convention as zero and one.</td></tr><tr><td>1</td><td>Chapter 1 Review</td><td>A bit is a binary digit 0 or 1.</td></tr><tr><td>1</td><td>Chapter 1 Review</td><td>A byte is a sequence of 8 bits.</td></tr><tr><td>1</td><td>Chapter 1 Review</td><td>A kilobyte is about 1,000 bytes, a megabyte about 1 million bytes, a gigabyte about 1 billion bytes, and a terabyte about 1,000 gigabytes.</td></tr><tr><td>1</td><td>Chapter 1 Review</td><td>Memory stores data and program instructions for the CPU to execute.</td></tr><tr><td>1</td><td>Chapter 1 Review</td><td>A memory unit is an ordered sequence of bytes.</td></tr><tr><td>1</td><td>Chapter 1 Review</td><td>Memory is volatile, because information is lost when the power is turned off.</td></tr><tr><td>1</td><td>Chapter 1 Review</td><td>Programs and data are permanently stored on storage devices and are moved to memory when the computer actually uses them.</td></tr><tr><td>1</td><td>Chapter 1 Review</td><td>The machine language is a set of primitive instructions built into every computer.</td></tr><tr><td>1</td><td>Chapter 1 Review</td><td>Assembly language is a low-level programming language in which a mnemonic is used to represent each machine-language instruction.</td></tr><tr><td>1</td><td>Chapter 1 Review</td><td>High-level languages are English-like and easy to learn and program.</td></tr><tr><td>1</td><td>Chapter 1 Review</td><td>A program written in a high-level language is called a source program.</td></tr><tr><td>1</td><td>Chapter 1 Review</td><td>A compiler is a software program that translates the source program into a machine language program.</td></tr><tr><td>1</td><td>Chapter 1 Review</td><td>The operating system (OS) is a program that manages and controls a computer’s activities.</td></tr><tr><td>1</td><td>Chapter 1 Review</td><td>Java is platform independent, meaning that you can write a program once and run it on any computer.</td></tr><tr><td>1</td><td>Chapter 1 Review</td><td>Java programs can be embedded in HTML pages and downloaded by Web browsers to bring live animation and interaction to Web clients.</td></tr><tr><td>1</td><td>Chapter 1 Review</td><td>The Java source file name must match the public class name in the program. Java source code files must end with the .java extension.</td></tr><tr><td>1</td><td>Chapter 1 Review</td><td>Every class is compiled into a separate bytecode file that has the same name as the class and ends with the .class extension.</td></tr><tr><td>1</td><td>Chapter 1 Review</td><td>To compile a Java source-code file from the command line, use the javac command.</td></tr><tr><td>1</td><td>Chapter 1 Review</td><td>To run a Java class from the command line, use the java command.</td></tr><tr><td>1</td><td>Chapter 1 Review</td><td>Every Java program is a set of class definitions. The keyword class introduces a class definition. The contents of the class are included in a block.</td></tr><tr><td>1</td><td>Chapter 1 Review</td><td>A block begins with an opening brace ({) and ends with a closing brace (}).</td></tr><tr><td>1</td><td>Chapter 1 Review</td><td>Methods are contained in a class. To run a Java program, the program must have a main method. The main method is the entry point where the program starts when it is executed.</td></tr><tr><td>1</td><td>Chapter 1 Review</td><td>Every statement in Java ends with a semicolon (;), known as the statement terminator.</td></tr><tr><td>1</td><td>Chapter 1 Review</td><td>Reserved words, or keywords, have a specific meaning to the compiler and cannot be used for other purposes in the program.</td></tr><tr><td>1</td><td>Chapter 1 Review</td><td>In Java, comments are preceded by two slashes (//) on a line, called a line comment, or enclosed between /* and */on one or several lines, called a block commentor paragraph comment. Comments are ignored by the compiler.</td></tr><tr><td>1</td><td>Chapter 1 Review</td><td>Java source programs are case sensitive.</td></tr><tr><td>1</td><td>Chapter 1 Review</td><td>There are two types of import statements: specific import and wildcard import. The specific import specifies a single class in the import statement; the wildcard import imports all the classes in a package.</td></tr><tr><td>1</td><td>Chapter 1 Review</td><td>Programming errors can be categorized into three types: syntax errors, runtime errors, and logic errors. Errors that occur during compilation are called syntax errors or compile errors. Runtime errors are errors that cause a program to terminate abnormally. Logic errors occur when a program does not perform the way it was intended to.</td></tr><tr><td>2</td><td>Algorithm</td><td>describes how a problem is solved by listing the actions that need to be taken and the order of their execution</td></tr><tr><td>2</td><td>Scanner</td><td>Class used for console input;<br>Import java.util.Scanner;<br>Scanner input = new Scanner(System.in);<br>Creates a scanner object and assigns its reference to the variable input</td></tr><tr><td>2</td><td>Methods for Scanner Objects</td><td>nextByte(); nextShort(); nextInt(); nextLong(); nextFloat(); nextDouble(); next(); nextLine();</td></tr><tr><td>2</td><td>Identifiers</td><td>the names that identify elements such as classes, methods and variables; consist of letters, digits, underscores and dollar signs; cannot start with a digit or be a reserved word</td></tr><tr><td>2</td><td>Variables</td><td>used to represent values that may be changed in the program</td></tr><tr><td>2</td><td>Scope of a Variable</td><td>The part of the program where the variable can be referenced</td></tr><tr><td>2</td><td>Named Constants</td><td>an identifier that represents a permanent value; uses final keyword; generally capitals<br>final datatype CONSTANT_NAME = value;</td></tr><tr><td>2</td><td>Numeric Data Types</td><td>Byte: -128 to 127, 8 bits; <br>Short: -2^15 to 2^15-1, 16 bits;<br>Int: 2^-31 to 2^31-1, 32 bits;<br>Long: -2^63 to 2^63-1, 64 bits<br>Float: single precision decimals, 32bits;<br>Double double precision decimals, 64bit</td></tr><tr><td>2</td><td>Unary Operator</td><td>Has only one operand, eg, -x</td></tr><tr><td>2</td><td>Binary Operator</td><td>Two operands, eg, x – 5</td></tr><tr><td>2</td><td>Exponent Operations</td><td>Math.pow(a,b) is used to compute a^b; defined in the Math class in the Java API</td></tr><tr><td>2</td><td>Literals</td><td>A literal is a constant value that appears directly in a program</td></tr><tr><td>2</td><td>Current Time</td><td>System.currentTimeMillis();<br>Returns milliseconds elapsed since 00:00:00 on Jan 1, 1970 GMT – known as the UNIX epoch as this was the year UNIX OS was formally introduced</td></tr><tr><td>2</td><td>Augmented Assignment Operators</td><td>Operators such as + - combined with the assignment operator to form augmented operators</td></tr><tr><td>2</td><td>Numeric Type Conversion</td><td>You can always assign a value to a numeric variable whose type supports a larger range of values; you cannot assign a value to a variable of a type with a smaller range unless you use type casting</td></tr><tr><td>2</td><td>Casting</td><td>an operation that converts a value of one data type into a value of another data type<br><br>System.out.println((int)1.7);<br><br>System.out.println((double)1 / 2);<br>Displays 0.5 because 1 is cast to 1.0, then 1.0 is divided by two.  Without casting, the result of dividing these integers would be 0</td></tr><tr><td>2</td><td>Widening a type</td><td>casting a type with a small range into a type with a larger range</td></tr><tr><td>2</td><td>Narrowing a type</td><td>casting a type with a large range to a type with a smaller range</td></tr><tr><td>2</td><td>Software Development Life Cycle</td><td>A multi-stage process that includes requirements specification, analysis, design, implementation, testing, deployment, and maintenance</td></tr><tr><td>2</td><td>System Design</td><td>to design a process for obtaining the output from the input; break down the problem into manageable components and design strategies for implementing each componenet; the essence is input, process and output (IPO)</td></tr><tr><td>2</td><td>Char Type</td><td>Used to represent a single character; enclosed in single quotation marks; can be pre- or post-incremented ie System.out.println(++a); displays b</td></tr><tr><td>2</td><td>Message Box with Input</td><td>Import javax.swing.JOptionPane;<br><br>String input = JOptionPane.showInputDialog(x); <br>Dialog box which enables the user to enter a string.   <br><br>String input = JOptionPane.showInputDialog(null, “Text on prompt”, “Title of prompt”, JoptionPane.QUESTION_MESSAGE);<br>Question Message shows a question mark on the input box</td></tr><tr><td>2</td><td>Converting strings to numbers</td><td>int intValue = Integer.parseInt(intString);<br>double doubleValue = Double.parseDouble(doubleString);</td></tr><tr><td>2</td><td>Chapter 2 Review</td><td>Identifiers are names for naming elements such as variables, constants, methods, classes, packages in a program. </td></tr><tr><td>2</td><td>Chapter 2 Review</td><td>An identifier is a sequence of characters that consists of letters, digits, underscores (_), and dollar signs ($). An identifier must start with a letter or an underscore. It cannot start with a digit. An identifier cannot be a reserved word. An identifier can be of any length. </td></tr><tr><td>2</td><td>Chapter 2 Review</td><td>Variables are used to store data in a program. </td></tr><tr><td>2</td><td>Chapter 2 Review</td><td>To declare a variable is to tell the compiler what type of data a variable can hold. </td></tr><tr><td>2</td><td>Chapter 2 Review</td><td>In Java, the equal sign (=) is used as the assignment operator. </td></tr><tr><td>2</td><td>Chapter 2 Review</td><td>A variable declared in a method must be assigned a value before it can be used. </td></tr><tr><td>2</td><td>Chapter 2 Review</td><td>A named constant (or simply a constant) represents permanent data that never changes. </td></tr><tr><td>2</td><td>Chapter 2 Review</td><td>A named constant is declared by using the keyword final. </td></tr><tr><td>2</td><td>Chapter 2 Review</td><td>Java provides four integer types (byte, short, int, and long) that represent integers of four different sizes. </td></tr><tr><td>2</td><td>Chapter 2 Review</td><td>Java provides two floating-point types (float and double) that represent floating- point numbers of two different precisions. </td></tr><tr><td>2</td><td>Chapter 2 Review</td><td>Java provides operators that perform numeric operations: + (addition), – (subtraction), * (multiplication), / (division), and % (remainder). </td></tr><tr><td>2</td><td>Chapter 2 Review</td><td>Integer arithmetic (/) yields an integer result. </td></tr><tr><td>2</td><td>Chapter 2 Review</td><td>The numeric operators in a Java expression are applied the same way as in an arithmetic expression. </td></tr><tr><td>2</td><td>Chapter 2 Review</td><td>Java provides the augmented assignment operators += (addition assignment), –= (subtraction assignment), *= (multiplication assignment), /= (division assignment), and %= (remainder assignment). </td></tr><tr><td>2</td><td>Chapter 2 Review</td><td>The increment operator (++) and the decrement operator (––) increment or decrement a variable by 1. </td></tr><tr><td>2</td><td>Chapter 2 Review</td><td>When evaluating an expression with values of mixed types, Java automatically converts the operands to appropriate types. </td></tr><tr><td>2</td><td>Chapter 2 Review</td><td>You can explicitly convert a value from one type to another using the (type)value notation. </td></tr><tr><td>2</td><td>Chapter 2 Review</td><td>Casting a variable of a type with a small range to a variable of a type with a larger range is known as widening a type. </td></tr><tr><td>2</td><td>Chapter 2 Review</td><td>Casting a variable of a type with a large range to a variable of a type with a smaller range is known as narrowing a type. </td></tr><tr><td>2</td><td>Chapter 2 Review</td><td>Widening a type can be performed automatically without explicit casting. Narrowing a type must be performed explicitly. </td></tr><tr><td>2</td><td>Chapter 2 Review</td><td>The character type char represents a single character. </td></tr><tr><td>2</td><td>Chapter 2 Review</td><td>An escape character is a notation for representing a special character. An escape character consists of a backslash (\) followed by a character or a character sequence. </td></tr><tr><td>2</td><td>Chapter 2 Review</td><td>The characters ' ', \t, \f, \r, and \n are known as the whitespace characters. </td></tr><tr><td>2</td><td>Chapter 2 Review</td><td>In computer science, midnight of January 1, 1970, is known as the UNIX epoch. </td></tr><tr><td>3</td><td>Selection Statement</td><td>Statements that let you choose actions with two or more alternative courses</td></tr><tr><td>3</td><td>Compare Characters</td><td>Comparing characters is the same as comparing their Unicodes; a is larger than A, for instance</td></tr><tr><td>3</td><td>Random Numbers</td><td>Several ways to generate random numbers incl:<br><br>System.currentTimeMillis() % 10;<br>System.currentTimeMillis() / 7 % 10;<br><br>Math.random() generations a random double value between 0.0 and 1.0, excluding 1.0 itself<br>(int)(Math.random() * 10); returns 1-9</td></tr><tr><td>3</td><td>Exiting a Program</td><td>System.exit(status) terminates the program; an 0 in (status) indicates normal termination, nonzero indicates abnormal termination</td></tr><tr><td>3</td><td>Ternary Operator</td><td>A conditional expression<br>boolean-expression ? expression1 : expression2;</td></tr><tr><td>3</td><td>Format Specifier</td><td>simple format specifier consists of a percent sign followed by a conversion code ie<br>System.out.printf(“Interest is %4.2f”, interest);<br>Where 4 is the width; 2 is the precision and f is the format specifier<br><br>%b – Boolean<br>%c – character<br>%d – decimal integer<br>%f – floating point number<br>%e – scientific notation<br>%s – string<br><br>Right justified by default; use – to left justify ie %8d will display ____1234 but %-8d will display 1234____ (__ indicates blanks)</td></tr><tr><td>3</td><td>Confirmation box</td><td>int option = JOptionPane.showConfirmationDialog(null, “Continue”);<br><br>Shows Yes / No / Cancel<br><br>When a button is clicked it returns:<br>JOptionPane.YES_OPTION(0)<br>JOptionPane.NO_OPTION(1)<br>JOptionPane.CANCEL_OPTION(2)<br><br>Access with if (answer == JOptionPane.YES_OPTION) etc</td></tr><tr><td>3</td><td>Hand Tracing</td><td>Catch errors by reading the program</td></tr><tr><td>3</td><td>jdb</td><td>Java's included command-line debugger</td></tr><tr><td>3</td><td>Chapter 3 Review</td><td>A boolean type variable can store a true or false value. </td></tr><tr><td>3</td><td>Chapter 3 Review</td><td>The relational operators (<, <=, ==, !=, >, >=) work with numbers and characters, and yield a Boolean value. </td></tr><tr><td>3</td><td>Chapter 3 Review</td><td>The Boolean operators &&,  ||,  !, and ^ operate with Boolean values and variables. </td></tr><tr><td>3</td><td>Chapter 3 Review</td><td>When evaluating  p1 && p2, Java first evaluates p1 and then evaluates  p2 if p1 is true; if p1 is false, it does not evaluate p2. When evaluating p1 || p2, Java first evaluates p1 and then evaluates p2 if p1 is false; if p1 is true, it does not evaluate p2. Therefore, && is referred to as the conditional or short-circuit AND operator, and || is referred to as the conditional or short-circuit OR operator. </td></tr><tr><td>3</td><td>Chapter 3 Review</td><td>Selection statements are used for programming with alternative courses of actions. There are several types of selection statements:  if statements, two-way  if-else statements,  nested  if statements,  multi-way  if-else statements,  switch statements, and conditional expressions. </td></tr><tr><td>3</td><td>Chapter 3 Review</td><td>The various if statements all make control decisions based on a Boolean expression. Based on the true or false evaluation of the expression, these statements take one of two possible courses. </td></tr><tr><td>3</td><td>Chapter 3 Review</td><td>The switch statement makes control decisions based on a switch expression of type char, byte, short, int, or String. </td></tr><tr><td>3</td><td>Chapter 3 Review</td><td>The keyword  break is optional in a switch statement, but it is normally used at the end of each case in order to skip the remainder of the  switch statement. If the break statement is not present, the next case statement will be executed. </td></tr><tr><td>3</td><td>Chapter 3 Review</td><td>The operators in expressions are evaluated in the order determined by the rules of parentheses, operator precedence, and operator associativity. </td></tr><tr><td>3</td><td>Chapter 3 Review</td><td>Parentheses can be used to force the order of evaluation to occur in any sequence. </td></tr><tr><td>3</td><td>Chapter 3 Review</td><td>Operators  with  higher  precedence  are  evaluated  earlier.  For  operators  of  the  same precedence, their associativity determines the order of evaluation. </td></tr><tr><td>3</td><td>Chapter 3 Review</td><td>All  binary  operators  except  assignment  operators  are  left-associative;  assignment operators are right-associative. </td></tr><tr><td>4</td><td>While Loop</td><td>Executes statements repeatedly while the condition is true<br><br>while (x) { }</td></tr><tr><td>4</td><td>Input Redirection</td><td>If you have a large amount of data to enter it can be stored in a text file and imported using<br><br>java SentinelValue < input.txt</td></tr><tr><td>4</td><td>Output Redirection</td><td>similar to input redirection; sends output to a file rather than displaying it on the console<br>java ClassName > output.txt</td></tr><tr><td>4</td><td>Input & Output Redirection</td><td>Gets input and sends output to a text file<br>java SentinelValue < input.txt > output.txt</td></tr><tr><td>4</td><td>Do-While Loop</td><td>Executes the loop body first then checks the loop continuation condition<br><br>do { } while ( );</td></tr><tr><td>4</td><td>For Loop</td><td>A concise syntax for writing loops;<br><br>for (initial-action; loop-continuation-condition; action-after-each-iteration) { .. }</td></tr><tr><td>4</td><td>Initial action</td><td>Where you declare the control variable ie int i = 0; more than one control variable can exist<br>for (int i = 0, int j = 0; (i + j < 10); i++, j++) { }</td></tr><tr><td>4</td><td>Break</td><td>Used in a loop to immediately terminate the loop</td></tr><tr><td>4</td><td>Continue</td><td>Ends the current iteration and program control goes to the end of the loop body.<br><br>Continue breaks out of an iteration while the break keyword breaks out of a loop.</td></tr><tr><td>4</td><td>Chapter 4 Review</td><td>There are three types of repetition statements: the while loop, the do-while loop, and the for loop. </td></tr><tr><td>4</td><td>Chapter 4 Review</td><td>The part of the loop that contains the statements to be repeated is called the loop body. </td></tr><tr><td>4</td><td>Chapter 4 Review</td><td>A one-time execution of a loop body is referred to as an iteration of the loop. </td></tr><tr><td>4</td><td>Chapter 4 Review</td><td>An infinite loop is a loop statement that executes infinitely. </td></tr><tr><td>4</td><td>Chapter 4 Review</td><td>In designing loops, you need to consider both the loop control structure and the loop body. </td></tr><tr><td>4</td><td>Chapter 4 Review</td><td>The while loop checks the loop-continuation-condition first. If the condition is true, the loop body is executed; if it is false, the loop terminates. </td></tr><tr><td>4</td><td>Chapter 4 Review</td><td>The do-while loop is similar to the while loop, except that the do-while loop executes the loop body first and then checks the loop-continuation-condition to decide whether to continue or to terminate. </td></tr><tr><td>4</td><td>Chapter 4 Review</td><td>The while loop and the do-while loop often are used when the number of repetitions is not predetermined. </td></tr><tr><td>4</td><td>Chapter 4 Review</td><td>A sentinel value is a special value that signifies the end of the loop. </td></tr><tr><td>4</td><td>Chapter 4 Review</td><td>The for loop generally is used to execute a loop body a predictable number of times; this number is not determined by the loop body. </td></tr><tr><td>4</td><td>Chapter 4 Review</td><td>The for loop control has three parts. The first part is an initial action that often initializes a control variable. The second part, the loop-continuation-condition, determines whether the loop body is to be executed. The third part is executed after each iteration and is often used to adjust the control variable. Usually, the loop control variables are initialized and changed in the control structure. </td></tr><tr><td>4</td><td>Chapter 4 Review</td><td>The while loop and for loop are called pre test loops because the continuation condition is checked before the loop body is executed. </td></tr><tr><td>4</td><td>Chapter 4 Review</td><td>The do-while loop is called a post test loop because the condition is checked after the loop body is executed. </td></tr><tr><td>4</td><td>Chapter 4 Review</td><td>Two keywords, break and continue, can be used in a loop. </td></tr><tr><td>4</td><td>Chapter 4 Review</td><td>The break keyword immediately ends the innermost loop, which contains the break. </td></tr><tr><td>4</td><td>Chapter 4 Review</td><td>The continue keyword only ends the current iteration. </td></tr></table>