<table id="definitionTable">
<tr><th>Ch</th><th>Term</th><th>Definition</th></tr><tr><td>1</td><td>Network</td><td>a communication system that allows clients and servers to communicate</td></tr><tr><td>1</td><td>Router</td><td>a device that is connected to two or more networks</td></tr><tr><td>1</td><td>LAN</td><td>small network of computers that are near each other and can communicate with each other over short distances</td></tr><tr><td>1</td><td>WAN</td><td>multiple LANs that have been connected together over long distances using routers</td></tr><tr><td>1</td><td>ISP</td><td>a company that owns a WAN that is connected to the Internet; leases its access to other companies that need to be connected to the internet</td></tr><tr><td>1</td><td>Internet Exchange Points (IXP)</td><td>large routers that connect WANs together</td></tr><tr><td>1</td><td>HTTP Request</td><td>Sent by the web browser to the server</td></tr><tr><td>1</td><td>HTTP Response</td><td>Sent by the server to the web browser - includes detail about the page and the parsed HTML itself<br><br>When Request sent is for a PHP page, web server sends the request to a php interpreter, which is running on the server</td></tr><tr><td>1</td><td>Round trip</td><td>the process that begins with the user requesting a web page and ends with the server sending a response back to the client</td></tr><tr><td>1</td><td>Web Servers</td><td>Most commonly used on is Apache on Linux; Microsoft include Internet Information Services (IIS) as part of the Windows Server OS</td></tr><tr><td>1</td><td>Scripting languages available on Web Servers</td><td>PHP, Perl and Python can all be directly installed on an Apache or IIS web server</td></tr><tr><td>1</td><td>Scripting languages available on Application Servers</td><td>JSP and ASP.NET require an application server in addition to the web server.</td></tr><tr><td>1</td><td>Database Server</td><td>PHP is commonly used with the MySQL database server; other popular ones are Oracle, IBM's DB2, and Microsoft's SQL Server</td></tr><tr><td>1</td><td>Apache</td><td>Open-source web server that can run on any major OS.  Supports many server-side scripting languages and can interact with many different database servers.  </td></tr><tr><td>1</td><td>LAMP</td><td>Most common Apache configuration: Linux, Apache, MySQL, PHP</td></tr><tr><td>1</td><td>IIS</td><td>Microsoft's web server that only runs on Windows OS.  PRimarily supports ASP.NET web development and MS SQL Server.</td></tr><tr><td>1</td><td>PHP</td><td>Hypertext Processor - typically used with apache but also available for IIS</td></tr><tr><td>1</td><td>JSP</td><td>JavaServer Pages - requires an application server such as Tomcat, available from Apache Software Foundation.  Use the .jsp file extension and typically work with servlets that are written in Java</td></tr><tr><td>1</td><td>ASP</td><td>Active Server Pages - used with the IIS web server.  Use the .aspx extention and typically work with server-side code written in C# or Visual Basic</td></tr><tr><td>1</td><td>Perl</td><td>originally developed for use at the UNIX command line to manipulate text; modified to build web applications; .pl file extension</td></tr><tr><td>1</td><td>Python</td><td>Used to develop many types of applications including for web; typically used with apache server; .py extension</td></tr><tr><td>1</td><td>MySQL</td><td>open-source database for all major OS</td></tr><tr><td>1</td><td>Oracle</td><td>Oracle's database server for all major OS</td></tr><tr><td>1</td><td>DB2</td><td>IBM's database server for all major OS</td></tr><tr><td>1</td><td>MS SQL Server</td><td>Microsoft's database server that is only available for Windows OS</td></tr><tr><td>1</td><td>MySQL takeover</td><td>MySQL was purchased by Sun who were purchased by Oracle; fearing this many original developers have begun working on different forks of the source code, the most popular of which is MariaDB</td></tr><tr><td>1</td><td>number_format</td><td>Returns a number thats formatted with a comma; if the second parameter is specified, rounds to desired precision<br><br>number_format($number[, decimals]);<br>number_format(12.567, 2); // 12.57</td></tr><tr><td>1</td><td>Deploy an application</td><td>Make it accessible from a browser by storing directories and files in the htdocs directory of an Apache server</td></tr><tr><td>1</td><td>Application root directory</td><td>The subfolder of /htdocs/ - main folder from which an application runs</td></tr><tr><td>1</td><td>URL</td><td>Uniform resource locator</td></tr><tr><td>1</td><td>IDE</td><td>Integrated development environment</td></tr><tr><td>2</td><td>PHP Syntax Rules</td><td>Statements end with a semicolon; extra whitespace is ignored</td></tr><tr><td>2</td><td>Statement</td><td>controls the operations of a program</td></tr><tr><td>2</td><td>Comment</td><td>helps document what the code does</td></tr><tr><td>2</td><td>Single-line comment</td><td>//</td></tr><tr><td>2</td><td>Block comment</td><td>/* aka multiple line comment */</td></tr><tr><td>2</td><td>Integer data type</td><td>whole number, no decimal places, + or -</td></tr><tr><td>2</td><td>Double data type</td><td>number with decimal places; aka decimal data type or floating-point number; + o -</td></tr><tr><td>2</td><td>Boolean data type</td><td>true or false</td></tr><tr><td>2</td><td>String data type</td><td>text, including any chacters; enclosed with quotation marks</td></tr><tr><td>2</td><td>Six data types</td><td>integer, double, boolean, string, array, object</td></tr><tr><td>2</td><td>Literal</td><td>a value that doesn't change.  To code a numeric literal, code the nummber within quotation marks.  To code a Boolean literal, code true or false</td></tr><tr><td>2</td><td>Constant</td><td>to declare a constant, you can use the define function to specify the name and value of the constant as shown above.  Since the value of a constant can't be changed, you don't code a dollar sign before its name when you declare it or when you use it.  Naming convention is to name in capitals</td></tr><tr><td>2</td><td>$_GET</td><td>An array of the values passed to the web server by the GET method (the default); a superglobal variable<br><br>Use when the page is going to get (read) data from the database server; when you need to make sure a page can be executed multiple times (refreshed).  only keeps 4KB of data</td></tr><tr><td>2</td><td>Superglobal variable</td><td>One always available to the php code for a page</td></tr><tr><td>2</td><td>$_POST</td><td>Form uses method="post" on a page<br><br>Use post when the page is going to post data to the server; reload will 'warn' users of information being reposted<br><br>Other advantages: doesn't append parameters to the URL, parameters don't get bookmarked by user; more appropriate for sensitive information</td></tr><tr><td>2</td><td>Interpolation</td><td>Use double quotes to insert variable values into a string; PHP interpreter checks entire string to see if any variables are in it; less efficient but advantageous</td></tr><tr><td>2</td><td>Compound Assignment Operators</td><td>.= += -= *= /= %=</td></tr><tr><td>2</td><td>date format</td><td>date($format)<br>Y = 4 digit year<br>y = 2 digit year<br>m = month with leading zeros<br>d = day with leading zeroes</td></tr><tr><td>2</td><td>isset</td><td>isset($var);<br>Returns a true value if the variable has been set and is not null</td></tr><tr><td>2</td><td>empty</td><td>empty($var);<br>Returns true if value hasn't been set, is a null value, or contains an empty string</td></tr><tr><td>2</td><td>is_numeric</td><td>is_numeric($var);<br>Returns true if the variable is a number or a string that can be converted</td></tr><tr><td>2</td><td>Conditional expression</td><td>Uses the relational operators to compare the results of two expressions</td></tr><tr><td>2</td><td>Compund Conditional Expression</td><td>joins two or more conditional expressions using logical operators</td></tr><tr><td>2</td><td>If statement</td><td>if ($var &lt; 10) { ... } else if ($var > 10) { ... } else { ... }</td></tr><tr><td>2</td><td>While Loop</td><td>while ($var &lt; 10) { ... $var++ }</td></tr><tr><td>2</td><td>For Loop</td><td>for ($x = 0; $x &lt; 5; $x++) { .. }</td></tr><tr><td>2</td><td>Include function</td><td>include($path);<br>Inserts and runs the specified file</td></tr><tr><td>2</td><td>Include Once function</td><td>include_once($path);<br>Makes sure the file has only been included once</td></tr><tr><td>2</td><td>Require function</td><td>require($path);<br>Works the same as the include functions; stops page with fatal error if not found</td></tr><tr><td>2</td><td>Require Once function</td><td>Same as require, but ensures only inserted once</td></tr><tr><td>2</td><td>Exit function</td><td>exit([$status]);<br>Exits the current php script; if $status isn't supplied the parenthesis are optional; if $status is supplied, this function sends the $status string to the browser before it exits<br><br>if ($is_valid) { ... exit(); }</td></tr><tr><td>2</td><td>Die function</td><td>die([$status]);<br>Works the same as the exit function</td></tr><tr><td>2</td><td>Navigating directories</td><td>./error.php // in the current directory<br>../error.php // navigate up one directory<br>../../error.php // navigate up two directories</td></tr><tr><td>8</td><td>Equality operators</td><td>== != &lt;></td></tr>
<tr><td>8</td><td>Unary operator</td><td>$x++</td></tr><tr><td>8</td><td>Binary operator</td><td>$x * $y</td></tr><tr><td>8</td><td>Ternary Operator</td><td>aka conditional operator<br><br>(conditional_expression) ? valueIfTrue : valueIfFalse;</td></tr><tr><td>8</td><td>Switch Statement</td><td>switch($letter_grade) { case 'A': ... break; }</td></tr><tr><td>8</td><td>Random Number</td><td>mt_rand(0,100); // rand # from 1 - 100</td></tr><tr><td>8</td><td>Highest Number</td><td>$maxN = max($rolls, $maxN); <br>get the value of the larger argument</td></tr><tr><td>8</td><td>Do While loop</td><td>Always executed at least once<br><br>do { .. } while (..);</td></tr><tr><td>8</td><td>Break statement</td><td>Causes the loop to end immediately</td></tr><tr><td>8</td><td>Continue statement</td><td>causes the loop to skip the remaining code in the iteration and start back at the beginning of the loop</td></tr><tr><td>8</td><td>Type Coercion</td><td>Equality operators use it; identity operators don't</td></tr><tr><td>8</td><td>Case Structure</td><td>Switch statement implements the case structure - often useful for the controller of an application that uses the MVC structure</td></tr><tr><td>8</td><td>For Loop - alternate structure</td><td>&lt;?php for ($v = 5; $v &lt;= 12; $v++) : ?><br>&lt;span class="&lt;?php echo $v; ?>"><br>&lt;?php echo $v; ?><br>&lt;/span><br>&lt;?php endfor; ?><br><br>Useful for HTML code</td></tr><tr><td>13</td><td>Function</td><td>A reuseable block of code.  Within the parenthesis you can code an optional parameter list that contains one or more parameters; within the body of the function you can code a return statement that ends the execution of the function and returns the specified value.  When you call a function, the arguments must be in the same order as the parameter list and must have comparable data types.<br><br>function coin_toss() {<br>$coin = (mt_rand(0,1) == 0) ? 'heads' : 'tails';<br>return $coin;<br>}<br><br>echo coin_toss();<br><br>function display_error($error) {<br>echo '&lt;p class="error">' . $error . '&lt;/p>';<br>}<br><br>display_error('Value out of range');</td></tr><tr><td>13</td><td>Passed by Value</td><td>By default, all function arguments are passed by value; this means a copy of the argument is sent to the function and the function can't change the original argument itself<br><br>function add_3_by_value($value) {<br>$value += 3;<br>echo '&lt;b>' . $value . '&lt;/b>';<br>}<br><br>$number = 5;<br>add_3_by_value($number);           // displays 8<br>echo '&lt;b>' . $number . '&lt;/b>';       // displays 5</td></tr><tr><td>13</td><td>Passed by Reference</td><td>A reference to the original argument is sent to the function; to pass by reference you code an ampersand in front of the parameter so that PHP sends a pointer to the original variable instead of sending a copy of the variable; changes the original variable's value<br><br>function add_3_by_ref(&$value) {<br>$value += 3;<br>echo '&lt;b>' . $number . '&lt;/b>';<br>}<br><br>$number = 5;<br>add_3_by_ref($number);             // displays 8<br>echo '&lt;b>' . $number . '&lt;/b>';     // displays 8</td></tr><tr><td>13</td><td>Scope</td><td>the scope of a variable determines which code can access it.  If a variable is defined inside a function it has local scope; if defined outside, global scope; you can use the global statement to access global variables from within a function; to access several global variables you may use the $GLOBALS array - an autoglobal variable<br><br>$b = 10;<br>function show_b() {<br>global $b;<br>echo $b;<br>}<br>show_b();   // displays 10<br><br>$c = 14;<br>function show_c() {<br>$c = $GLOBALS['c'];<br>echo $c;<br>}<br>show_c(); // displays 14</td></tr><tr><td>13</td><td>Scalar value</td><td>A literal number, string, or Boolean value; cannot contain operators, variables or function calls</td></tr><tr><td>13</td><td>Naming Conflicts</td><td>PHP functions are stored in the global namespace and hence are susceptible to naming conflicts; as of PHP 5.3 you can store functions in another namespace to provide naming flexibility; you can include constants, functions and classes<br><br>&lt;?php <br>namespace cart;<br>// Functions in cart namespace<br>?><br><br>&lt;?php <br>namespace cart {<br>// Functions in cart namespace<br>}<br>?><br><br>&lt;?php<br>namespace murach\cart{<br>// Functions in murach\cart namespace<br>}<br>?><br>---------------------------------------------------<br>USING THE FUNCTIONS<br><br>// create a file that contains a namespace with one function<br>&lt;?php <br>namespace murach\errors {<br>function log($error) {<br>echo '&lt;b>' . $error . '&lt;/b>';<br>}<br>}<br>?><br><br>// call the log function<br>murach\errors\log('Invalid value');<br><br>// create an alias and use it to call the log function<br>use murach\errors as e;<br>e\log('Invalid value');<br></td></tr><tr><td>13</td><td>Variable Function</td><td>A function name stored in a variable as a string; useful if you don't know which function to use until runtime and can then access different functions by way of selection statements and store it in a variable name so you don't have to continue using selections each time<br><br>$function = (mt_rand(0,1) == 1) ? 'array_sum' : 'array_product';<br>$values = array(4, 9, 16);<br>$result = $function($values); // 29 for array_sum, 576 for array_product</td></tr>
<tr><td>13</td><td>Callback</td><td>a function passed as an argument to another function; you can use a variable function in a callback<br><br>function validate($data, $functions) {<br>$valid = true;<br>foreach ($functions as $function) {<br>$valid = $valid && $function($data);<br>}<br>return $valid;<br>}<br><br>function is_at_least_18($number) {<br>return $number >= 18;<br>}<br><br>function is_less_than_62($number) {<br>return $number &lt; 62;<br>}<br><br>$age = 25;<br>$functions = array('is_numeric', 'is_at_least_18', 'is_less_than_62');<br>is_valid_age = validate($age, $functions); // true</td></tr><tr><td>13</td><td>Anonymous Function</td><td>a function that isn't named; you can store an anonymous function in a variable and use it as a variable function</td></tr><tr><td>13</td><td>Closure</td><td>an inner function that has access to the outer function's variables, using the use clause; use a closure to generate an anonymous function that knows which key to sort on, anonymous function can then be sent to the usort function as a callback<br><br>$employees = array {<br>array('name' => 'Lex', 'id' => 5399),<br>array('name' => 'Andrew', 'id' => 8729)<br>);<br><br>function array_compare_factory($sort_key) {<br>return function ($left, $right) use ($sort_key) {<br>if ($left[$sort_key] &lt; $right[$sort_key]) {<br>return -1;<br>} else if ($left[$sort_key] > $right[$sort_key]) {<br>return 1;<br>} else {<br>return 0;<br>}<br>};<br>}<br><br>----------------<br>// sort array by name column<br>$sort_by_name = array_compare_factory('name');<br>usort($employees, $sort_by_name);<br></td></tr><tr><td>13</td><td>Array pop</td><td>$list = array('Apples', 'Oranges', 'Grapes');<br>$last = array_pop($list);     // removes grapes; stores return value<br>array_pop($list);               // removes oranges; discards return value</td></tr>
<tr><td>13</td><td>Pass by reference - modify a string</td><td>function wrap_in_tags(&$text, $tag) {<br>$before = '&lt;' . $tag . '>';<br>$after = '&lt;/' . $tag . '>';<br>$text = $before . $text . $after;<br>}<br><br>$message = 'Lex is awesome';<br>wrap_in_tag($message, 'b');<br>echo $message;         // &lt;b>Lex is awesome&lt;/b></td></tr><tr><td>13</td><td>Function - return multiple values</td><td>function array_analyze($array, &$sum, &$prod, &$avg) {<br>$sum = array_sum($array);<br>$prod = array_product($array);<br>$avg = $sum / count($array);<br>}<br><br>$list = array(1, 4, 9, 16);<br>array_analyze($list, $s, $p, $a);<br>echo 'Sum: ' . $s . ' Product: ' . $p . ' Average: ' . $a;</td></tr><tr><td>13</td><td>Autoglobal Variable</td><td>variable available anywhere in your code</td></tr><tr><td>13</td><td>Default value for parameter</td><td>If a default parameter is supplied, the parameter becomes optional; if no other parameter is supplied, the default is used.   Assign in the parentheses with the equal sign.  A default value must be a scalar value (no expressions, function calls or objects) - to get around this restriction the NULL value can be used and case statements within to call functions/objects; default parameters must be coded after any required parameters<br><br>function get_rand_bool_text($type = 'coin') {<br>$rand = mt_rand(0,1);<br>switch ($type) {<br>case 'coin': .... break;<br>case 'switch': ... break;<br>}<br>return $result;<br>}<br><br>echo get_rand_bool_text(); <br>echo get_rand_bool_text('switch');<br><br>function is_leap_year($date = NULL) {<br>if (!isset($date)) {<br>$date = new DateTime();<br>}<br>if ($date->format('L') == '1') return true;<br>else return false;<br>}<br><br>$is_leap_year = is_leap_year();<br>$is_leap_year = is_leap_year(new DateTime('March 15, 2015'); // false<br><br>function display_error($error, $tag = 'p', $class = 'error') {<br>$opentag = '&lt;' . $tag . ' class="' . $class . '">';<br>$closetag = '&lt;/' . $tag . '>';<br>echo $opentag . $error . $closetag;<br>}<br><br>echo display_error('Out of range');<br>echo display_error('Out of range', 'li');</td></tr><tr><td>13</td><td>Variable-length parameter lists</td><td>Use built-in functions that get all arguments as an array or a count of parameters (func_get_args, func_num_args, func_get_arg)<br><br>function add() {<br>$numbers = func_get_args();<br>$total = 0;<br>foreach ($numbers as $number) {<br>total += $number;<br>}<br>return $total;<br>}<br><br>$sum = add(5, 10, 15);<br>--------------------------------------<br>function average($x) { // $x forces at least one argument<br>$count = func_num_args();<br>$total = 0;<br>for ($i = 0; i &lt; $count; $i++) {<br>$total += func_get_arg($i);<br>}<br>return $total / $count;<br>}<br><br>$avg = average(75, 95, 100);<br>--------------------------------------<br>function array_append(&$array, $x) {<br>$values = func_get_args();<br>array_shift($values);<br>foreach($values as $value) {<br>$array[] = $value;<br>}<br>}<br><br>$data = array('apples', 'oranges');<br>array_append($data, 'grapes', 'pears');</td></tr><tr><td>13</td><td>func_get_args()</td><td>Returns an array that contains the arguments passed to the function</td></tr><tr><td>13</td><td>func_num_args()</td><td>Returns the number of arguments passed to the function</td></tr><tr><td>13</td><td>func_get_arg($i)</td><td>Returns the argument at the specified index</td></tr><tr><td>13</td><td>A library of functions</td><td>Prefix functions the same to indicate they work together; code in one file and then use require_once to import it all.  </td></tr><tr><td>13</td><td>Include Path</td><td>get_include_path returns the current path; set_include_path allows you to tell php to look elsewhere for files (adds path to list, does not remove initial path)<br><br>$include_path = get_include_path();<br><br>set_include_path($include_path . ';C:\xampp\htdocs\book_appps\lib'); // gives php a second path where it might find files<br><br>include a file after path is set:<br>require_once cart.php;</td></tr><tr><td>13</td><td>usort</td><td>Built-in PHP function that sorts an array using a user-defined comparison function; accepts two arguments: the array to be sorted and the user-defined comparison function<br><br>usort($array, $function)</td></tr>
<tr><td>13</td><td>custom comparison function</td><td>must accept two arguments; returns -1 if the arguments are in the correct order, 1 if they aren't, 0 if the arguments are the same<br><br>$compare_function = function($left, $right) {<br>$l = (float) $left;<br>$r = (float) $right;<br>if ($l &lt; $r) return -1;<br>if ($l > $r) return 1;<br>return 0;<br>};<br><br>$a = 3;<br>$b = 5;<br>$result = $compare_function($a, $b);         // -1<br><br>$values = array(5, 2, 4, 1, 3);<br>usort($values, $compare_function);            // 1, 2, 3, 4, 5</td></tr>
</table>